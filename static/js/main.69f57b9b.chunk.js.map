{"version":3,"sources":["components/Pomodoro.js","App.js","index.js"],"names":["Pomodoro","useState","isShortBreak","togglePomoBreakType","isPomoStarted","togglePomoAction","isBreakStarted","togglePomoBreakAction","pomoMinutes","setPomoMinutes","pomoSeconds","setPomoSeconds","pomoMinutesRef","useRef","current","pomoSecondsRef","interValIdRef","pomoStartedFlagRef","breakStartedFlagRef","startTimer","interval","setInterval","stopTimer","clearInterval","setTimeout","handleBreakBtn","event","targetId","target","id","handlePomoAction","alert","className","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMA6HeA,MA5Hf,WAAqB,IAAD,EAC4BC,oBAAS,GADrC,mBACTC,EADS,KACKC,EADL,OAEyBF,oBAAS,GAFlC,mBAETG,EAFS,KAEKC,EAFL,OAGgCJ,oBAAS,GAHzC,mBAGTK,EAHS,KAGOC,EAHP,OAIsBN,mBAAS,IAJ/B,mBAITO,EAJS,KAIIC,EAJJ,OAKoBR,mBAAS,GAL7B,mBAKVS,EALU,KAKEC,EALF,KAMVC,EAAiBC,iBAAO,IAC9BD,EAAeE,QAAUN,EACzB,IAAMO,EAAiBF,iBAAO,GAC9BE,EAAeD,QAAUJ,EACzB,IAAMM,EAAgBH,kBAAQ,GACxBI,EAAqBJ,mBAC3BI,EAAmBH,QAAUV,EAC7B,IAAMc,EAAsBL,mBAC5BK,EAAoBJ,QAAUR,EAC9B,IAAMa,EAAa,WACf,IAAMC,EAAWC,aAAY,WACS,IAA3BN,EAAeD,QACXF,EAAeE,QAAU,KAAO,GAC/BH,EAAe,IACfF,EAAeG,EAAeE,QAAU,KAErCG,EAAmBH,QAClBT,GAAiB,GACZa,EAAoBJ,SACzBP,GAAsB,GAE1Be,KAGJX,EAAeI,EAAeD,QAAU,GAE5CE,EAAcF,QAAUM,IACzB,MAELE,EAAY,SAAZA,KAC4B,IAA3BN,EAAcF,SACbS,cAAcP,EAAcF,SAC5BL,EAAe,IACfE,EAAe,GACfK,EAAcF,SAAW,GAEzBU,WAAWF,EAAU,MAmBvBG,EAAiB,SAACC,GACpB,IAAMC,EAAWD,EAAME,OAAOC,GACb,oBAAdF,GAAoCzB,EAEjB,mBAAbyB,GAAiCzB,GACtCC,GAAoB,GAFpBA,GAAoB,IAKtB2B,EAAmB,SAACJ,GACtB,IAAME,EAASF,EAAME,OAAOC,GACd,cAAXD,GAA2BxB,EAOV,aAAXwB,GAAyBxB,GAC9BC,GAAiB,GACjBiB,KACgB,mBAAXM,GAAgCtB,EAOrB,mBAAXsB,GAA+BtB,GACpCC,GAAsB,GACtBe,KAEAS,MAAM,qBAVF3B,EAIA2B,MAAM,2DAvCVzB,EAWAyB,MAAM,qBAVH7B,GACCO,EAAe,GACfE,EAAe,GACfQ,MAEAV,EAAe,IACfE,EAAe,GACfQ,KA6BAZ,GAAsB,IAZtBD,EAIAyB,OAAO7B,EAAe,eAAgB,cAAgB,gDAHtDG,GAAiB,GACjBc,MAsBZ,OACI,sBAAKa,UAAU,eAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAW,yCAA2C9B,EAAe,aAAe,cACzF,wBAAQ8B,UAAU,uBAAwBH,GAAG,kBAAkBI,QAASR,EAAxE,yBACA,wBAAQO,UAAU,sBAAsBH,GAAG,iBAAiBI,QAASR,EAArE,2BAEJ,qBAAKO,UAAU,oBAAoBH,GAAKzB,GAAiBE,EAAkB,cAAgB,IAA3F,SACI,sBAAM0B,UAAU,iBAAiBH,GAAG,YAApC,UAAkDrB,GAAe,EAAI,IAAIA,EAAcA,GAAc,KAAME,GAAe,EAAK,IAAIA,EAAcA,OAErJ,sBAAKsB,UAAU,gCAAf,UAEQ5B,EACI,wBAAQ4B,UAAU,sBAAsBH,GAAG,WAAWI,QAASH,EAA/D,kBACA,wBAAQE,UAAU,uBAAuBH,GAAG,YAAYI,QAASH,EAAjE,mBAIJxB,EACI,wBAAQ0B,UAAU,0BAA0BH,GAAG,iBAAiBI,QAASH,EAAzE,wBACA,wBAAQE,UAAU,yBAAyBH,GAAG,iBAAiBI,QAASH,EAAxE,+BC1GTI,MATf,WACE,OACE,sBAAKF,UAAU,MAAf,UACE,oBAAIA,UAAU,eAAd,sBACA,cAAC,EAAD,QCANG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.69f57b9b.chunk.js","sourcesContent":["import React,{useState, useRef} from 'react'\nfunction Pomodoro() {\n    const [isShortBreak, togglePomoBreakType] = useState(true);\n    const [isPomoStarted,togglePomoAction] = useState(false);\n    const [isBreakStarted, togglePomoBreakAction] = useState(false);\n    const [pomoMinutes, setPomoMinutes] = useState(25);\n    const[pomoSeconds,setPomoSeconds] = useState(0);\n    const pomoMinutesRef = useRef(25);\n    pomoMinutesRef.current = pomoMinutes;\n    const pomoSecondsRef = useRef(0);\n    pomoSecondsRef.current = pomoSeconds;\n    const interValIdRef = useRef(-1);\n    const pomoStartedFlagRef = useRef();\n    pomoStartedFlagRef.current = isPomoStarted;\n    const breakStartedFlagRef = useRef();\n    breakStartedFlagRef.current = isBreakStarted;\n    const startTimer = () =>{\n        const interval = setInterval(() => {\n                if(pomoSecondsRef.current === 0){\n                    if(pomoMinutesRef.current - 1 !== -1){\n                        setPomoSeconds(59);\n                        setPomoMinutes(pomoMinutesRef.current - 1);\n                    }else{\n                        if(pomoStartedFlagRef.current){\n                            togglePomoAction(false);\n                        }else if(breakStartedFlagRef.current){\n                            togglePomoBreakAction(false);\n                        }\n                        stopTimer();\n                    }\n                }else{\n                    setPomoSeconds(pomoSecondsRef.current - 1);\n                }\n                interValIdRef.current = interval;\n            }, 1000);\n    }\n    const stopTimer = () =>{\n        if(interValIdRef.current !== -1){\n            clearInterval(interValIdRef.current);\n            setPomoMinutes(25);\n            setPomoSeconds(0);\n            interValIdRef.current = -1;\n        }else{\n            setTimeout(stopTimer,1000);\n        }\n       \n    }\n    const startBreak = () =>{\n        if(!isBreakStarted){\n            if(isShortBreak){\n                setPomoMinutes(5);\n                setPomoSeconds(0);\n                startTimer();\n            }else{\n                setPomoMinutes(15);\n                setPomoSeconds(0);\n                startTimer();\n            }\n        }else{\n            alert(\"Can't start break\");\n        }\n    }\n    const handleBreakBtn = (event) =>{\n        const targetId = event.target.id;\n        if(targetId  === 'short-break_btn' && !isShortBreak){\n            togglePomoBreakType(true);\n        }else if(targetId === 'long-break_btn' && isShortBreak){\n            togglePomoBreakType(false);\n        }\n    }\n    const handlePomoAction = (event) =>{\n        const target = event.target.id;\n        if(target === 'start-btn' && !isPomoStarted){\n            if(!isBreakStarted){\n                togglePomoAction(true);\n                startTimer();\n            }else{\n                alert((isShortBreak ? \"Short break \": \"Long break\") + \"is taken, so stop break to start pomo timer\");\n            }\n        }else if(target === 'stop-btn' && isPomoStarted){\n            togglePomoAction(false);\n            stopTimer();\n        }else if(target === 'take-break_btn' && !isBreakStarted){\n            if(!isPomoStarted){\n                startBreak();\n                togglePomoBreakAction(true);\n            }else{\n                alert(\"Pomdora Timer is running, please stop it to take break\");\n            }\n        }else if(target === 'stop-break_btn' && isBreakStarted){\n            togglePomoBreakAction(false);\n            stopTimer();\n        }else{\n            alert(\"Invalid operation\");\n        }\n    }\n    \n    return (\n        <div className=\"pomo-wrapper\">\n            <div className=\"pomo-break_btn_wrapper\">\n                <div className={\"pomo-break_btn_highlights btn-active \" + (isShortBreak ? \"left-begin\" : \"left-end\")}></div>\n                <button className=\"pomo-short_break_btn\"  id=\"short-break_btn\" onClick={handleBreakBtn}>Short break</button>\n                <button className=\"pomo-long_break_btn\" id=\"long-break_btn\" onClick={handleBreakBtn}>Long break</button>\n            </div>\n            <div className=\"pomo-timer_circle\" id={(isPomoStarted || isBreakStarted) ? \"pomo_circle\" : \"#\"}>\n                <span className=\"pomo-time_span\" id=\"pomo-time\">{(pomoMinutes <= 9 ? \"0\"+pomoMinutes : pomoMinutes) +\":\"+ (pomoSeconds <= 9 ?  \"0\"+pomoSeconds : pomoSeconds)}</span>\n            </div>\n            <div className=\"pomo-timer_action_btn-wrapper\">\n                {\n                    isPomoStarted ? \n                        <button className=\"pomo-timer_stop_btn\" id=\"stop-btn\" onClick={handlePomoAction}>Stop</button> :\n                        <button className=\"pomo-timer_start_btn\" id=\"start-btn\" onClick={handlePomoAction}>Start</button>\n\n                }    \n                {\n                    isBreakStarted ? \n                        <button className=\"pomo-timer_stpbreak_btn\" id=\"stop-break_btn\" onClick={handlePomoAction}>Stop break</button> :\n                        <button className=\"pomo-timer_tkbreak_btn\" id=\"take-break_btn\" onClick={handlePomoAction}>Take break</button>\n                \n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Pomodoro\n","import './App.css';\nimport Pomodoro from './components/Pomodoro'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h3 className=\"pomo_heading\">Pomodoro</h3>\n      <Pomodoro/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}